(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{325:function(s,t,a){"use strict";a.r(t);var r=a(0),e=Object(r.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"javascript-string-常用方法整理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript-string-常用方法整理"}},[s._v("#")]),s._v(" JavaScript string 常用方法整理")]),s._v(" "),a("h3",{attrs:{id:"charat"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#charat"}},[s._v("#")]),s._v(" charAt()")]),s._v(" "),a("ul",[a("li",[s._v("string.charAt(index) 回指定位置的字符。第一个字符位置为 0, 第二个字符位置为 1,以此类推.")]),s._v(" "),a("li",[s._v("index必需。表示字符串中某个位置的数字，即字符在字符串中的位置。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var str = 'hello word!'\nstr.charAt(4)//o\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h3",{attrs:{id:"concat"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#concat"}},[s._v("#")]),s._v(" concat()")]),s._v(" "),a("ul",[a("li",[s._v("string.concat(string1, string2, ..., stringX) 方法用于连接两个或多个字符串。该方法没有改变原有字符串，但是会返回连接两个或多个字符串新字符串。")]),s._v(" "),a("li",[s._v("string1, string2, ..., stringX 必需。将被连接为一个字符串的一个或多个字符串对象。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var str1 = 'hello ';\nvar str2 = 'word!';\nvar str = str1.concat(str2);//'hello word!' \n//也可直接用+号连接\nvar str = str1+str2; //'hello word!' \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h3",{attrs:{id:"indexof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#indexof"}},[s._v("#")]),s._v(" indexOf()")]),s._v(" "),a("ul",[a("li",[s._v("string.indexOf(searchvalue,start) 方法可返回某个指定的字符串值在字符串中首次出现的位置。 如果没有找到匹配的字符串则返回 -1。 注意： indexOf() 方法区分大小写。")]),s._v(" "),a("li",[s._v("searchvalue\t必需。规定需检索的字符串值。 start\t可选的整数参数。规定在字符串中开始检索的位置。它的合法取值是 0 到 string Object.length - 1。如省略该参数，则将从字符串的首字符开始检索。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var str = 'hello word!';\nstr.indexOf('l')//2;\n//常用于判断某个字符串是否包含某个子串\nif(str.indexOf('hella')==-1){\n    //如果不存在则做点什么\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h3",{attrs:{id:"replace"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#replace"}},[s._v("#")]),s._v(" replace()")]),s._v(" "),a("ul",[a("li",[s._v("string.replace(searchvalue,newvalue)方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。")]),s._v(" "),a("li",[s._v("searchvalue\t必须。规定子字符串或要替换的模式的 RegExp 对象。请注意，如果该值是一个字符串，则将它作为要检索的直接量文本模式，而不是首先被转换为 RegExp 对象。newvalue\t必需。一个字符串值。规定了替换文本或生成替换文本的函数。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var str = 'hello word!';\nstr.replace('word','baby')//hello baby!\nstr.replace(/l/g,'b')//hebbo word!\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"slice"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#slice"}},[s._v("#")]),s._v(" slice()")]),s._v(" "),a("ul",[a("li",[s._v("string.slice(start,end)方法可提取字符串的某个部分，并以新的字符串返回被提取的部分。")]),s._v(" "),a("li",[s._v("使用 start 和 end 参数来指定字符串提取的部分。字符串中第一个字符位置为 0, 第二个字符位置为 1, 以此类推。提示： 如果是负数，则该参数规定的是从字符串的尾部开始算起的位置。也就是说，-1 指字符串的最后一个字符，-2 指倒数第二个字符，以此类推。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var str = 'hello word!';\nstr.slice(0,3);//hel\nstr.slice(-3,-1);//rd\nstr.slice(2,5);//llo\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h3",{attrs:{id:"split"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#split"}},[s._v("#")]),s._v(" split()")]),s._v(" "),a("ul",[a("li",[s._v("string.split(separator,limit) 方法用于把一个字符串分割成字符串数组。")]),s._v(" "),a("li",[s._v('提示： 如果把空字符串 ("") 用作 separator，那么 stringObject 中的每个字符之间都会被分割。')]),s._v(" "),a("li",[s._v("注意： split() 方法不改变原始字符串。")]),s._v(" "),a("li",[s._v("separator\t可选。字符串或正则表达式，从该参数指定的地方分割 string Object。\nlimit\t可选。该参数可指定返回的数组的最大长度。如果设置了该参数，返回的子串不会多于这个参数指定的数组。如果没有设置该参数，整个字符串都会被分割，不考虑它的长度。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var str = 'hello word!';\nstr.split(' ');//['hello','word!']\nstr.split('o');//['hell',' w','rd!']\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"substr"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#substr"}},[s._v("#")]),s._v(" substr()")]),s._v(" "),a("ul",[a("li",[s._v("string.substr(start,length) 方法可在字符串中抽取从开始下标开始的指定数目的字符。substr() 方法不会改变源字符串")]),s._v(" "),a("li",[s._v("start\t必需。要抽取的子串的起始下标。必须是数值。如果是负数，那么该参数声明从字符串的尾部开始算起的位置。也就是说，-1 指字符串中最后一个字符，-2 指倒数第二个字符，以此类推。\nlength\t可选。子串中的字符数。必须是数值。如果省略了该参数，那么返回从 stringObject 的开始位置到结尾的字串。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var str = 'hello word!';\nstr.substr(1,3)//ell\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h3",{attrs:{id:"substring"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#substring"}},[s._v("#")]),s._v(" substring()")]),s._v(" "),a("ul",[a("li",[s._v("string.substring(from, to) 方法用于提取字符串中介于两个指定下标之间的字符。")]),s._v(" "),a("li",[s._v("from\t必需。一个非负的整数，规定要提取的子串的第一个字符在 string Object 中的位置。to\t可选。一个非负的整数，比要提取的子串的最后一个字符在 string Object 中的位置多 1。\n如果省略该参数，那么返回的子串会一直到字符串的结尾。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var str = 'hello word!';\nstr.substring(1,4)//ell\nstr.substring(1)//ello word!\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])])])}),[],!1,null,null,null);t.default=e.exports}}]);